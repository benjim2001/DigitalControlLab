import math  # noqa: F401
import time
# You can also import scripts that you put into the folder with controller
import utils
from rcj_soccer_robot import RCJSoccerRobot, TIME_STEP


class MyRobot1(RCJSoccerRobot):
    def run(self):

        sum_Error1=0
        Error_back1=0
        kp1=25
        ki1=0
        kd1=1
        sum_Error2=0
        Error_back2=0
        kp2=8
        ki2=0
        kd2=0.5
        sum_Error3=0
        Error_back3=0
        kp3=20
        ki3=0.05
        kd3=1

        while self.robot.step(TIME_STEP) != -1:
            if self.is_new_data():
                data = self.get_new_data()  # noqa: F841
                t1=time.time()
                while self.is_new_team_data():
                    team_data = self.get_new_team_data()  # noqa: F841
                    # Do something with team data

                if self.is_new_ball_data():
                    ball_data = self.get_new_ball_data()
                else:
                    # If the robot does not see the ball, stop motors
                    self.left_motor.setVelocity(0)
                    self.right_motor.setVelocity(0)
                    continue

                # Get data from compass
                heading = self.get_compass_heading()  # noqa: F841

                # Get GPS coordinates of the robot
                robot_pos = self.get_gps_coordinates()  # noqa: F841
                # Get data from sonars
                sonar_values = self.get_sonar_values()  # noqa: F841

                #self.left_motor.setVelocity(10)
                #self.right_motor.setVelocity(10)
                n=1
                while (n<2):
                    pos = robot_pos
                    n+=1
                B = ball_data["direction"]
                phi_des=math.atan2(B[1]-pos[1],B[0]-pos[0])
                phi_des=math.degrees(phi_des)
                heading_deg=math.degrees(heading)
                Error = phi_des - heading_deg
                Error = math.atan2(math.sin(Error*(math.pi/180)),math.cos(Error*(math.pi/180)))

                if Error<0.05:
                    break
                sum_Error2 += Error*0.1
                Error_d = (Error - Error_back2)/0.1
                Error_back2=Error
                
                v = 0
                w = kp2*Error + ki2*sum_Error2 + kd2*Error_d 
                R=0.02
                L=0.08
                
                vr = (2*v - L*w) / (2*R)
                vl = (2*v + L*w) / (2*R)
                if vr>10:
                    vr=9.5
                if vr<-10:
                    vr=-9.5
                if vl>10 :
                    vl=9.5
                if vl<-10:
                    vl=9.5
                    
                self.left_motor.setVelocity(vl)
                self.right_motor.setVelocity(vr)
  

        while self.robot.step(TIME_STEP) != -1:
            if self.is_new_data():
                data = self.get_new_data()  # noqa: F841
                t1=time.time()
                while self.is_new_team_data():
                    team_data = self.get_new_team_data()  # noqa: F841
                    # Do something with team data

                if self.is_new_ball_data():
                    ball_data = self.get_new_ball_data()
                else:
                    # If the robot does not see the ball, stop motors
                    self.left_motor.setVelocity(0)
                    self.right_motor.setVelocity(0)
                    continue

                # Get data from compass
                heading = self.get_compass_heading()  # noqa: F841

                # Get GPS coordinates of the robot
                robot_pos = self.get_gps_coordinates()  # noqa: F841

                # Get data from sonars
                sonar_values = self.get_sonar_values()  # noqa: F841

                #self.left_motor.setVelocity(10)
                #self.right_motor.setVelocity(10)
                
                B = ball_data["direction"]
                Error = math.pow((math.pow(B[1] - robot_pos[1],2)+math.pow(B[0] - robot_pos[0],2)),(0.5))
                Error = Error/math.pow(10,(math.log(abs(Error))+1))
                sum_Error1 += Error*0.1
                sum_Error1 = sum_Error1/math.pow(10,(math.log(abs(sum_Error1))+1))
                Error_d = (Error - Error_back1)/0.1
                Error_back1=Error
                
                v = (kp1*Error + ki1*sum_Error1 + kd1*Error_d)/20
                w = 0
                
                R=0.02
                L=0.08
                
                vr = -(2*v - L*w) / (2*R)
                vl = -(2*v + L*w) / (2*R)
                
                if vr>10:
                    vr=9.5
                if vr<-10:
                    vr=-9.5
                if vl>10 :
                    vl=9.5
                if vl<-10:
                    vl=9.5
                    
   
                self.left_motor.setVelocity(vl)
                self.right_motor.setVelocity(vr)
                #print(vr,vl)


        while self.robot.step(TIME_STEP) != -1:
            if self.is_new_data():
                data = self.get_new_data()  # noqa: F841
                t1=time.time()
                while self.is_new_team_data():
                    team_data = self.get_new_team_data()  # noqa: F841
                    # Do something with team data

                if self.is_new_ball_data():
                    ball_data = self.get_new_ball_data()
                else:
                    # If the robot does not see the ball, stop motors
                    self.left_motor.setVelocity(0)
                    self.right_motor.setVelocity(0)
                    continue

                # Get data from compass
                heading = self.get_compass_heading()  # noqa: F841

                # Get GPS coordinates of the robot
                robot_pos = self.get_gps_coordinates()  # noqa: F841
                # Get data from sonars
                sonar_values = self.get_sonar_values()  # noqa: F841

                #self.left_motor.setVelocity(10)
                #self.right_motor.setVelocity(10)
                n=1
                while (n<2):
                    pos = robot_pos
                    n+=1
                B = [-1.5,0]
                phi_des=math.atan2(B[1]-pos[1],B[0]-pos[0])
                phi_des=math.degrees(phi_des)
                heading_deg=math.degrees(heading)
                Error = phi_des - heading_deg
                Error = math.atan2(math.sin(Error*(math.pi/180)),math.cos(Error*(math.pi/180)))

                if Error<0.05:
                    break
                sum_Error3 += Error*0.1
                Error_d = (Error - Error_back3)/0.1
                Error_back3=Error
                
                v = 0
                w = kp3*Error + ki3*sum_Error3 + kd3*Error_d 
                R=0.02
                L=0.08
                
                vr = (2*v - L*w) / (2*R)
                vl = (2*v + L*w) / (2*R)
                if vr>10:
                    vr=9.5
                if vr<-10:
                    vr=-9.5
                if vl>10 :
                    vl=9.5
                if vl<-10:
                    vl=9.5
                    
                self.left_motor.setVelocity(vl)
                self.right_motor.setVelocity(vr)
